extends layout

block css
    style.
        .floor_plan_element {
            position: absolute;
            top: 0;
            left: 0;
        }

block content
    div(class='container')
        div(class="page-header")
            h1 一般偵測
        h2 人員偵測(平面圖)
        div(class="text-center")
            div(style="position: relative; display: inline-block")
                img(id="floor_plan" src="/images/floor_plan.png" class="img-responsive")
                div(id="room0" class="floor_plan_element" style="height: 202px; width: 402px; background-color: inherit")
                div(id="room1" class="floor_plan_element" style="height: 149px; width: 198px; background-color: inherit")
        h2 偵測器
        ul(class="list-group")
            li(class="list-group-item")
                i(id="fire_detect" class="fa fa-circle fa-lg" style="color: gray;")
                | &nbsp;火災偵測
            li(class="list-group-item")
                i(id="window_detect" class="fa fa-circle fa-lg" style="color: gray;")
                | &nbsp;窗戶偵測

        h2 偵測器資料&nbsp;
            small (更新頻率：5秒)
        h3 溫度
        div(id="chart_temperature")
        h3 濕度
        div(id="chart_humidity")
        h3 瓦斯
        div(id="chart_gas")
        h3 CO
        div(id="chart_co")

block javascript
    script(src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.js")
    script(type="text/javascript" src="/javascripts/floor_plan.js")
    script(type="text/javascript" src="https://www.gstatic.com/charts/loader.js")
    script(type="text/javascript").
        $(function () {
            // Load the Visualization API and the corechart package.
            google.charts.load('current', {'packages': ['corechart']});

            // Set a callback to run when the Google Visualization API is loaded.
            google.charts.setOnLoadCallback(function () {
                addLineChart(!{JSON.stringify(data_temperature)}, 'chart_temperature');
                addLineChart(!{JSON.stringify(data_humidity)}, 'chart_humidity');
                addLineChart(!{JSON.stringify(data_gas)}, 'chart_gas');
                addLineChart(!{JSON.stringify(data_co)}, 'chart_co');
            });
        });

        var charts = {};
        var options = {
            curveType: 'function',
            legend: {position: 'none'},
            hAxis: {
                gridlines: {
                    count: -1,
                    units: {
                        days: {format: ['MMM dd']},
                        hours: {format: ['HH:mm', 'ha']},
                    }
                }
            }
        };

        function addLineChart(data, div_name) {
            var dataTable = google.visualization.arrayToDataTable(data);
            var chart = new google.visualization.LineChart(document.getElementById(div_name));

            chart.draw(dataTable, options);

            charts[div_name] = {
                table: dataTable,
                chart: chart
            };
        }

    script(src="https://cdn.socket.io/socket.io-1.4.5.js")
    script(type="text/javascript").
        $(function () {
            socket = io("//" + window.location.hostname + (location.port == "" ? "" : ":" + location.port));

            socket.on("connect", function () {
                socket.emit('add-channel', 'normal-monitor');

                socket.on('update-chart', function (data) {
                    var chart = charts[data.chart];
                    if (chart !== undefined) {
                        var saved = new Date(data.saved);

                        var removeId = chart.table.getFilteredRows([{column: 0, maxValue: moment(saved).subtract(5, 'minutes')}]);
                        if (removeId.length > 0) {
                            chart.table.removeRows(removeId[0], removeId.length);
                        }

                        chart.table.addRows([[saved, data.val]]);
                        chart.chart.draw(charts[data.chart].table, options);
                    }
                });
                
                socket.on('update-sensor', function (data) {
                    // console.log(data);
                    if (data.name == 'sensor_human_infrared_0') {
                        updateRoomStatus(0, data.status);
                    }
                    else if (data.name == 'sensor_human_infrared_1') {
                        updateRoomStatus(1, data.status);
                    }
                    else if (data.name == 'fire_detect' || data.name == 'window_detect') {
                        updateCircleColor(data.name, data.status);
                    }
                })
            });
        });

    script(type="text/javascript").
        function updateCircleColor(name, status) {
            var $circle = $('#' + name);
            if (status == 'enable') {
                $circle.css('color', 'red');
            }
            else if (status == 'disable') {
                $circle.css('color', 'gray');
            }
        }